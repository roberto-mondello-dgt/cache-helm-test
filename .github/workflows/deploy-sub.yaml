name: Deploy (sub)

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to simulate deploy against'
        required: true
        type: string
      timeout_seconds:
        description: 'Simulation timeout in seconds'
        required: true
        type: number

defaults:
  run:
    shell: bash
    working-directory: ./interop-core-deployment

env:
  SCRIPTS_FOLDER: "./interop-infra-commons/scripts/helm"

jobs:
  workflow_setup:
    name: Setup Steps
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    outputs:
      microservices: ${{ steps.set-outputs.outputs.microservices }}
      cronjobs: ${{ steps.set-outputs.outputs.cronjobs }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          repository: roberto-mondello-dgt/cache-helm-test
          fetch-depth: 0

      - id: calculate-hash
        run: |
          hash=$(find . -type f \( -name 'Chart.yaml' -o -path './microservices/*' -o -path './jobs/*' \) -exec sha256sum {} \; | sort | sha256sum | awk '{print $1}')
          echo "hash=$hash" >> "$GITHUB_OUTPUT"
          echo "Computed Hash: $hash"

      - name: Restore Cache
        uses: actions/cache@v3
        id: cache-restore
        with:
          path: /tmp/cache
          key: simulation-${{ inputs.environment }}-${{ steps.calculate-hash.outputs.hash }}

      - name: Download and Extract Charts
        run: |
          mkdir -p /tmp/cache

          CHART_FILE="./interop-core-deployment/Chart.yaml"
          if [ -f "$CHART_FILE" ]; then
            charts=$(yq '.dependencies[] | .repository + " " + .name + " " + .version' "$CHART_FILE" | paste - - -)
            while IFS=$'\t' read -r repo name version; do
              echo "Processing chart: $name version: $version from $repo"

              if [ ! -f "/tmp/cache/$name-$version.tgz" ]; then
                echo "Downloading chart: $name-$version.tgz using Helm"
                helm repo add temp-repo "$repo" --force-update >/dev/null 2>&1 || true
                helm pull temp-repo/$name --version "$version" --destination /tmp/cache/ || true
                helm repo remove temp-repo >/dev/null 2>&1 || true
              else
                echo "Chart $name-$version already in cache, skipping download."
              fi

              if [ ! -d "/tmp/cache/$name" ]; then
                echo "Extracting chart: $name-$version.tgz"
                tar -xzf "/tmp/cache/$name-$version.tgz" -C /tmp/cache/ || true
              else
                echo "Chart $name already extracted, skipping."
              fi
            done <<< "$charts"
          else
            echo "Chart.yaml not found at $CHART_FILE. Skipping chart processing."
          fi
        shell: /usr/bin/bash --noprofile --norc -e -o pipefail {0}

      - id: set-outputs
        run: |
          if [ -d "microservices" ]; then
            microservices=$(find microservices -type f -path "*/${{ inputs.environment }}/values.yaml" -exec dirname {} \; | awk -F'/' '{print $2}' | jq -R -s -c 'split("\n")[:-1]')
          else
            microservices="[]"
          fi
          echo "microservices=$microservices" >> "$GITHUB_OUTPUT"

          if [ -d "jobs" ]; then
            cronjobs=$(find jobs -type f -path "*/${{ inputs.environment }}/values.yaml" -exec dirname {} \; | awk -F'/' '{print $2}' | jq -R -s -c 'split("\n")[:-1]')
          else
            cronjobs="[]"
          fi
          echo "cronjobs=$cronjobs" >> "$GITHUB_OUTPUT"

      - name: Save Cache
        if: steps.cache-restore.outputs.cache-hit != 'true'
        uses: actions/cache@v3
        with:
          path: /tmp/cache
          key: simulation-${{ inputs.environment }}-${{ steps.calculate-hash.outputs.hash }}

  simulate_microservices:
    name: Simulate Microservice Deploy - ${{ matrix.microservice }}
    needs: workflow_setup
    runs-on: ubuntu-latest
    if: ${{ needs.workflow_setup.outputs.microservices != '[]' }}
    strategy:
      matrix:
        microservice: ${{ fromJson(needs.workflow_setup.outputs.microservices) }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          repository: roberto-mondello-dgt/cache-helm-test
          fetch-depth: 0

      - name: Simulate Microservice Deploy
        run: |
          echo "::info::Simulating deploy for microservice: ${{ matrix.microservice }}"
          echo "::info::Deploy with caching completed."

  simulate_cronjobs:
    name: Simulate Cronjob Deploy - ${{ matrix.cronjob }}
    needs: workflow_setup
    runs-on: ubuntu-latest
    if: ${{ needs.workflow_setup.outputs.cronjobs != '[]' }}
    strategy:
      matrix:
        cronjob: ${{ fromJson(needs.workflow_setup.outputs.cronjobs) }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          repository: roberto-mondello-dgt/cache-helm-test
          fetch-depth: 0

      - name: Simulate Cronjob Deploy
        run: |
          echo "::info::Simulating deploy for cronjob: ${{ matrix.cronjob }}"
          echo "::info::Deploy with caching completed."
