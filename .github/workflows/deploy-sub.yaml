name: Deploy (sub) with Cache

on: 
  workflow_call:
    inputs:
      environment:
        description: 'Environment to run apply against'
        required: true
        type: string
      timeout_seconds:
        description: 'Kubectl apply wait timeout in seconds for Deployments'
        required: true
        type: number
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to run apply against'
        required: true
        type: string
      timeout_seconds:
        description: 'Kubectl apply wait timeout in seconds for Deployments'
        required: true
        type: number

defaults:
  run:
    shell: bash

jobs:
  workflow_setup:
    name: Setup steps
    runs-on: ubuntu-latest
    outputs:
      microservices: ${{ steps.set-outputs.outputs.microservices }}
      cronjobs: ${{ steps.set-outputs.outputs.cronjobs }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - id: set-outputs
        run: |
          echo "microservices=$(find microservices -type f -path '*/${{ inputs.environment }}/values.yaml' -exec dirname {} \; | awk -F'/' '{print $2}' | jq -R -s -c 'split("\n")[:-1]'))" >> "$GITHUB_OUTPUT"
          echo "cronjobs=$(find jobs -type f -path '*/${{ inputs.environment }}/values.yaml' -exec dirname {} \; | awk -F'/' '{print $2}' | jq -R -s -c 'split("\n")[:-1]'))" >> "$GITHUB_OUTPUT"

  deploy_common_configmaps:
    name: Deploy Common Configmaps
    needs: workflow_setup
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - id: cache-commons
        name: Cache commons charts
        uses: actions/cache@v3
        with:
          path: /tmp/cache/commons
          key: ${{ runner.os }}-commons-${{ inputs.environment }}-${{ hashFiles('commons/**/Chart.yaml') }}
      - name: Notify commons deploy
        run: |
          echo "deploy issued: commons configmaps (cache-hit=${{ steps.cache-commons.outputs.cache-hit }})"

  deploy_ms:
    name: Deploy Microservice ${{ matrix.microservice }}
    needs: [workflow_setup, deploy_common_configmaps]
    if: ${{ ! contains(needs.workflow_setup.outputs.microservices, '[]') }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        microservice: ${{ fromJson(needs.workflow_setup.outputs.microservices) }}
      fail-fast: false
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - id: cache-ms
        name: Cache microservice chart
        uses: actions/cache@v3
        with:
          path: /tmp/cache/ms-${{ matrix.microservice }}
          key: ${{ runner.os }}-ms-${{ inputs.environment }}-${{ matrix.microservice }}-${{ hashFiles(format('microservices/{0}/Chart.yaml', matrix.microservice)) }}
      - name: Notify microservice deploy
        run: |
          echo "deploy issued: microservice ${{ matrix.microservice }} (cache-hit=${{ steps.cache-ms.outputs.cache-hit }})"

  deploy_cj:
    name: Deploy Cronjob ${{ matrix.cronjob }}
    needs: [workflow_setup, deploy_common_configmaps]
    if: ${{ ! contains(needs.workflow_setup.outputs.cronjobs, '[]') }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        cronjob: ${{ fromJson(needs.workflow_setup.outputs.cronjobs) }}
      fail-fast: false
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - id: cache-cj
        name: Cache cronjob chart
        uses: actions/cache@v3
        with:
          path: /tmp/cache/cj-${{ matrix.cronjob }}
          key: ${{ runner.os }}-cj-${{ inputs.environment }}-${{ matrix.cronjob }}-${{ hashFiles(format('jobs/{0}/Chart.yaml', matrix.cronjob)) }}
      - name: Notify cronjob deploy
        run: |
          echo "deploy issued: cronjob ${{ matrix.cronjob }} (cache-hit=${{ steps.cache-cj.outputs.cache-hit }})"
