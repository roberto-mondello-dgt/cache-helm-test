name: Deploy (sub)

on: 
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to simulate deploy against'
        required: true
        type: string
      timeout_seconds:
        description: 'Simulation timeout in seconds'
        required: true
        type: number

defaults:
  run:
    shell: bash

env:
  SCRIPTS_FOLDER: "./interop-infra-commons/scripts/helm"

jobs:  
  workflow_setup:
    name: Setup Steps
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    outputs:
      microservices: ${{ steps.set-outputs.outputs.microservices }}
      cronjobs: ${{ steps.set-outputs.outputs.cronjobs }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          repository: roberto-mondello-dgt/cache-helm-test
          fetch-depth: 0

      - id: calculate-hash
        run: |
          hash=$(find . -type f \( -name 'Chart.yaml' -o -path './microservices/*' -o -path './jobs/*' \) -exec sha256sum {} \; | sort | sha256sum | awk '{print $1}')
          echo "hash=$hash" >> "$GITHUB_OUTPUT"
          echo "Computed Hash: $hash"

      - name: Restore Cache
        uses: actions/cache@v3
        id: cache-restore
        with:
          path: /tmp/cache
          key: Linux-simulation-${{ inputs.environment }}-${{ steps.calculate-hash.outputs.hash }}

      - id: set-outputs
        run: |
          if [ -d "microservices" ]; then
            microservices=$(find microservices -type f -path "*/${{ inputs.environment }}/values.yaml" -exec dirname {} \; | awk -F'/' '{print $2}' | jq -R -s -c 'split("\n")[:-1]')
          else
            microservices="[]"
          fi
          echo "microservices=$microservices" >> "$GITHUB_OUTPUT"

          if [ -d "jobs" ]; then
            cronjobs=$(find jobs -type f -path "*/${{ inputs.environment }}/values.yaml" -exec dirname {} \; | awk -F'/' '{print $2}' | jq -R -s -c 'split("\n")[:-1]')
          else
            cronjobs="[]"
          fi
          echo "cronjobs=$cronjobs" >> "$GITHUB_OUTPUT"

      - name: Save Cache
        if: steps.cache-restore.outputs.cache-hit != 'true'
        uses: actions/cache@v3
        with:
          path: /tmp/cache
          key: Linux-simulation-${{ inputs.environment }}-${{ steps.calculate-hash.outputs.hash }}

  simulate_microservices:
    name: Simulate Microservice Deploy - ${{ matrix.microservice }}
    needs: workflow_setup
    runs-on: ubuntu-latest
    if: ${{ ! contains(needs.workflow_setup.outputs.microservices, '[]') }}
    strategy:
      matrix:
        microservice: ${{ fromJson(needs.workflow_setup.outputs.microservices) }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          repository: roberto-mondello-dgt/cache-helm-test
          fetch-depth: 0

      - name: Simulate Microservice Deploy
        run: |
          echo "::info::Simulating deploy for microservice: ${{ matrix.microservice }}"
          echo "::info::This is a dry run. No real deployment executed."

  simulate_cronjobs:
    name: Simulate Cronjob Deploy - ${{ matrix.cronjob }}
    needs: workflow_setup
    runs-on: ubuntu-latest
    if: ${{ ! contains(needs.workflow_setup.outputs.cronjobs, '[]') }}
    strategy:
      matrix:
        cronjob: ${{ fromJson(needs.workflow_setup.outputs.cronjobs) }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          repository: roberto-mondello-dgt/cache-helm-test
          fetch-depth: 0

      - name: Simulate Cronjob Deploy
        run: |
          echo "::info::Simulating deploy for cronjob: ${{ matrix.cronjob }}"
          echo "::info::This is a dry run. No real deployment executed."
