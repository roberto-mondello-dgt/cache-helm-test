apiVersion: v1
kind: ConfigMap
metadata:
  name: flyway-read-model-purpose
  namespace: dev
data:
  V1__Init_Purpose.sql: |-
    CREATE SCHEMA IF NOT EXISTS "${NAMESPACE}_purpose";

    GRANT USAGE ON SCHEMA "${NAMESPACE}_purpose" to
      "${NAMESPACE}_purpose_rmw_user",
      "${NAMESPACE}_purpose_process_user",
      readonly_user;

    CREATE TABLE IF NOT EXISTS "${NAMESPACE}_purpose".purpose (
      id UUID,
      metadata_version INTEGER NOT NULL,
      eservice_id UUID NOT NULL,
      consumer_id UUID NOT NULL,
      delegation_id UUID,
      suspended_by_consumer BOOLEAN,
      suspended_by_producer BOOLEAN,
      title VARCHAR NOT NULL,
      description VARCHAR NOT NULL,
      created_at TIMESTAMP WITH TIME ZONE NOT NULL,
      updated_at TIMESTAMP WITH TIME ZONE,
      is_free_of_charge BOOLEAN NOT NULL,
      free_of_charge_reason VARCHAR,
      PRIMARY KEY (id),
      CONSTRAINT purpose_id_metadata_version_unique UNIQUE (id, metadata_version)
    );
    GRANT SELECT, UPDATE, INSERT, DELETE ON TABLE "${NAMESPACE}_purpose".purpose TO "${NAMESPACE}_purpose_rmw_user";
    GRANT SELECT ON TABLE "${NAMESPACE}_purpose".purpose TO "${NAMESPACE}_purpose_process_user";
    GRANT SELECT ON TABLE "${NAMESPACE}_purpose".purpose TO readonly_user;    

    CREATE TABLE IF NOT EXISTS "${NAMESPACE}_purpose".purpose_risk_analysis_form (
      id UUID,
      purpose_id UUID NOT NULL REFERENCES "${NAMESPACE}_purpose".purpose (id) ON DELETE CASCADE,
      metadata_version INTEGER NOT NULL,
      version VARCHAR NOT NULL,
      risk_analysis_id UUID,
      PRIMARY KEY (id, purpose_id),
      FOREIGN KEY (purpose_id, metadata_version) REFERENCES "${NAMESPACE}_purpose".purpose (id, metadata_version) DEFERRABLE INITIALLY DEFERRED
    );
    GRANT SELECT, UPDATE, INSERT, DELETE ON TABLE "${NAMESPACE}_purpose".purpose_risk_analysis_form TO "${NAMESPACE}_purpose_rmw_user";
    GRANT SELECT ON TABLE "${NAMESPACE}_purpose".purpose_risk_analysis_form TO "${NAMESPACE}_purpose_process_user";
    GRANT SELECT ON TABLE "${NAMESPACE}_purpose".purpose_risk_analysis_form TO readonly_user;        

    CREATE TABLE IF NOT EXISTS "${NAMESPACE}_purpose".purpose_risk_analysis_answer (
      id UUID,
      purpose_id UUID NOT NULL REFERENCES "${NAMESPACE}_purpose".purpose (id) ON DELETE CASCADE,
      metadata_version INTEGER NOT NULL,
      risk_analysis_form_id UUID NOT NULL,
      kind VARCHAR NOT NULL,
      "key" VARCHAR NOT NULL,
      value VARCHAR ARRAY,
      PRIMARY KEY (id, purpose_id),
      FOREIGN KEY (risk_analysis_form_id, purpose_id) REFERENCES "${NAMESPACE}_purpose".purpose_risk_analysis_form (id, purpose_id) ON DELETE CASCADE,
      FOREIGN KEY (purpose_id, metadata_version) REFERENCES "${NAMESPACE}_purpose".purpose (id, metadata_version) DEFERRABLE INITIALLY DEFERRED
    );
    GRANT SELECT, UPDATE, INSERT, DELETE ON TABLE "${NAMESPACE}_purpose".purpose_risk_analysis_answer TO "${NAMESPACE}_purpose_rmw_user";
    GRANT SELECT ON TABLE "${NAMESPACE}_purpose".purpose_risk_analysis_answer TO "${NAMESPACE}_purpose_process_user";
    GRANT SELECT ON TABLE "${NAMESPACE}_purpose".purpose_risk_analysis_answer TO readonly_user;        

    CREATE TABLE IF NOT EXISTS "${NAMESPACE}_purpose".purpose_version (
      id UUID,
      purpose_id UUID NOT NULL REFERENCES "${NAMESPACE}_purpose".purpose (id) ON DELETE CASCADE,
      metadata_version INTEGER NOT NULL,
      state VARCHAR NOT NULL,
      daily_calls INTEGER NOT NULL,
      rejection_reason VARCHAR,
      created_at TIMESTAMP WITH TIME ZONE NOT NULL,
      updated_at TIMESTAMP WITH TIME ZONE,
      first_activation_at TIMESTAMP WITH TIME ZONE,
      suspended_at TIMESTAMP WITH TIME ZONE,
      PRIMARY KEY (id),
      FOREIGN KEY (purpose_id, metadata_version) REFERENCES "${NAMESPACE}_purpose".purpose (id, metadata_version) DEFERRABLE INITIALLY DEFERRED
    );
    GRANT SELECT, UPDATE, INSERT, DELETE ON TABLE "${NAMESPACE}_purpose".purpose_version TO "${NAMESPACE}_purpose_rmw_user";
    GRANT SELECT ON TABLE "${NAMESPACE}_purpose".purpose_version TO "${NAMESPACE}_purpose_process_user";
    GRANT SELECT ON TABLE "${NAMESPACE}_purpose".purpose_version TO readonly_user;        

    CREATE TABLE IF NOT EXISTS "${NAMESPACE}_purpose".purpose_version_document (
      purpose_id UUID NOT NULL REFERENCES "${NAMESPACE}_purpose".purpose (id) ON DELETE CASCADE,
      metadata_version INTEGER NOT NULL,
      purpose_version_id UUID UNIQUE NOT NULL REFERENCES "${NAMESPACE}_purpose".purpose_version (id) ON DELETE CASCADE,
      id UUID NOT NULL,
      content_type VARCHAR NOT NULL,
      path VARCHAR NOT NULL,
      created_at TIMESTAMP WITH TIME ZONE NOT NULL,
      PRIMARY KEY (id, purpose_version_id),
      FOREIGN KEY (purpose_id, metadata_version) REFERENCES "${NAMESPACE}_purpose".purpose (id, metadata_version) DEFERRABLE INITIALLY DEFERRED
    );
    GRANT SELECT, UPDATE, INSERT, DELETE ON TABLE "${NAMESPACE}_purpose".purpose_version_document TO "${NAMESPACE}_purpose_rmw_user";
    GRANT SELECT ON TABLE "${NAMESPACE}_purpose".purpose_version_document TO "${NAMESPACE}_purpose_process_user";
    GRANT SELECT ON TABLE "${NAMESPACE}_purpose".purpose_version_document TO readonly_user;

  V1.1__Permission_Process_Purpose.sql: |-
    GRANT SELECT ON ALL TABLES IN SCHEMA "${NAMESPACE}_purpose" TO "${NAMESPACE}_authorization_process_user";

  V1.2__Grant_Usage_Schema_Purpose.sql: |-
    GRANT USAGE ON SCHEMA "${NAMESPACE}_purpose" to "${NAMESPACE}_authorization_process_user";    
