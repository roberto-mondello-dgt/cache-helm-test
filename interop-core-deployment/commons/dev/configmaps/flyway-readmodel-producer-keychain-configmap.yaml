apiVersion: v1
kind: ConfigMap
metadata:
  name: flyway-read-model-producer-keychain
  namespace: dev
data:
  V1__Init_ProducerKeychain.sql: |-
    CREATE SCHEMA IF NOT EXISTS "${NAMESPACE}_producer_keychain";

    GRANT USAGE ON SCHEMA "${NAMESPACE}_producer_keychain" to
      "${NAMESPACE}_producer_keychain_rmw_user",
      "${NAMESPACE}_authorization_process_user",
      readonly_user;

    CREATE TABLE IF NOT EXISTS "${NAMESPACE}_producer_keychain".producer_keychain (
      id UUID,
      metadata_version INTEGER NOT NULL,
      producer_id UUID NOT NULL,
      name VARCHAR NOT NULL,
      description VARCHAR NOT NULL,
      created_at TIMESTAMP WITH TIME ZONE NOT NULL,
      PRIMARY KEY (id),
      CONSTRAINT producer_keychain_id_metadata_version_unique UNIQUE (id, metadata_version)
    );
    GRANT SELECT, UPDATE, INSERT, DELETE ON TABLE "${NAMESPACE}_producer_keychain".producer_keychain TO "${NAMESPACE}_producer_keychain_rmw_user";
    GRANT SELECT ON TABLE "${NAMESPACE}_producer_keychain".producer_keychain TO "${NAMESPACE}_authorization_process_user";
    GRANT SELECT ON TABLE "${NAMESPACE}_producer_keychain".producer_keychain TO readonly_user;    

    CREATE TABLE IF NOT EXISTS "${NAMESPACE}_producer_keychain".producer_keychain_user (
      metadata_version INTEGER NOT NULL,
      producer_keychain_id UUID NOT NULL REFERENCES "${NAMESPACE}_producer_keychain".producer_keychain (id) ON DELETE CASCADE,
      user_id UUID NOT NULL,
      PRIMARY KEY (producer_keychain_id, user_id),
      FOREIGN KEY (producer_keychain_id, metadata_version) REFERENCES "${NAMESPACE}_producer_keychain".producer_keychain (id, metadata_version) DEFERRABLE INITIALLY DEFERRED
    );
    GRANT SELECT, UPDATE, INSERT, DELETE ON TABLE "${NAMESPACE}_producer_keychain".producer_keychain_user TO "${NAMESPACE}_producer_keychain_rmw_user";
    GRANT SELECT ON TABLE "${NAMESPACE}_producer_keychain".producer_keychain_user TO "${NAMESPACE}_authorization_process_user";
    GRANT SELECT ON TABLE "${NAMESPACE}_producer_keychain".producer_keychain_user TO readonly_user;    

    CREATE TABLE IF NOT EXISTS "${NAMESPACE}_producer_keychain".producer_keychain_eservice (
      metadata_version INTEGER NOT NULL,
      producer_keychain_id UUID NOT NULL REFERENCES "${NAMESPACE}_producer_keychain".producer_keychain (id) ON DELETE CASCADE,
      eservice_id UUID NOT NULL,
      PRIMARY KEY (producer_keychain_id, eservice_id),
      FOREIGN KEY (producer_keychain_id, metadata_version) REFERENCES "${NAMESPACE}_producer_keychain".producer_keychain (id, metadata_version) DEFERRABLE INITIALLY DEFERRED
    );
    GRANT SELECT, UPDATE, INSERT, DELETE ON TABLE "${NAMESPACE}_producer_keychain".producer_keychain_eservice TO "${NAMESPACE}_producer_keychain_rmw_user";
    GRANT SELECT ON TABLE "${NAMESPACE}_producer_keychain".producer_keychain_eservice TO "${NAMESPACE}_authorization_process_user";
    GRANT SELECT ON TABLE "${NAMESPACE}_producer_keychain".producer_keychain_eservice TO readonly_user;    

    CREATE TABLE IF NOT EXISTS "${NAMESPACE}_producer_keychain".producer_keychain_key (
      metadata_version INTEGER NOT NULL,
      producer_keychain_id UUID NOT NULL REFERENCES "${NAMESPACE}_producer_keychain".producer_keychain (id) ON DELETE CASCADE,
      user_id UUID NOT NULL,
      kid VARCHAR NOT NULL,
      name VARCHAR NOT NULL,
      encoded_pem VARCHAR NOT NULL,
      "algorithm" VARCHAR NOT NULL,
      "use" VARCHAR NOT NULL,
      created_at TIMESTAMP WITH TIME ZONE NOT NULL,
      PRIMARY KEY (producer_keychain_id, kid),
      FOREIGN KEY (producer_keychain_id, metadata_version) REFERENCES "${NAMESPACE}_producer_keychain".producer_keychain (id, metadata_version) DEFERRABLE INITIALLY DEFERRED
    );
    GRANT SELECT, UPDATE, INSERT, DELETE ON TABLE "${NAMESPACE}_producer_keychain".producer_keychain_key TO "${NAMESPACE}_producer_keychain_rmw_user";
    GRANT SELECT ON TABLE "${NAMESPACE}_producer_keychain".producer_keychain_key TO "${NAMESPACE}_authorization_process_user";
    GRANT SELECT ON TABLE "${NAMESPACE}_producer_keychain".producer_keychain_key TO readonly_user;
