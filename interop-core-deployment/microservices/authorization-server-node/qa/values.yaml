name: "interop-be-authorization-server-node"
techStack: "nodejs"

serviceAccount:
  roleArn: "arn:aws:iam::755649575658:role/interop-be-authorization-server-qa-es1"

service:
  create: true
  containerPort: 8088
  albHealthCheck:
    path: "/authorization-server/status"
    port: "8088"
    protocol: "HTTP"

configmap:
  AUDIT_FALLBACK_S3_BUCKET: "interop-generated-jwt-details-fallback-{{.Values.namespace}}"
  S3_BUCKET: "interop-generated-jwt-details-fallback-{{.Values.namespace}}-es1"
  GENERATED_INTEROP_TOKEN_KID: "{{.Values.local.interop_be_commons.RSA_KEYS_IDENTIFIERS}}"
  GENERATED_INTEROP_TOKEN_ISSUER: "{{.Values.namespace}}.interop.pagopa.it"
  GENERATED_INTEROP_TOKEN_M2M_AUDIENCE: "{{.Values.namespace}}.interop.pagopa.it/m2m"
  GENERATED_INTEROP_TOKEN_M2M_DURATION_SECONDS: "99999999"
  CLIENT_ASSERTION_JWT_AUDIENCE: "auth.{{.Values.namespace}}.interop.pagopa.it/client-assertion"
  RATE_LIMITER_MAX_REQUESTS: "10"
  RATE_LIMITER_BURST_PERCENTAGE: "1.0"
  RATE_LIMITER_RATE_INTERVAL_MILLIS: "1000"
  RATE_LIMITER_TIMEOUT_MILLIS: "300"
  PRODUCER_KAFKA_CLIENT_ID: "{{.Values.namespace}}-pagopa-interop-authorization-process"
  CLIENT_ASSERTION_AUDIENCE: "auth.{{.Values.namespace}}.interop.pagopa.it/client-assertion"

deployment:
  image:
    repositoryName: "interop-be-authorization-server"
  env:
    HOST: "0.0.0.0"
    PORT: "8088"
    SERVICE_VERSION: "{{.Values.deployment.image.tag}}"
  envFromFieldRef:
    AWS_ROLE_SESSION_NAME: "metadata.name"
    POD_NAME: "metadata.name"
    NODE_IP: "status.hostIP"
    PRODUCER_KAFKA_CLIENT_ID: "metadata.name"
  envFromConfigmaps:
    PRODUCER_KAFKA_BROKERS: "common-kafka.KAFKA_BROKERS"
    TOKEN_AUDITING_TOPIC: "common-kafka.TOKEN_AUDITING_TOPIC"
    TOKEN_GENERATION_READMODEL_TABLE_NAME_TOKEN_GENERATION: "common-token-generation-read-model.TOKEN_READMODEL_TOKEN_STATES_TABLE_NAME"
    APPLICATION_AUDIT_TOPIC: "common-kafka.APPLICATION_AUDIT_TOPIC"
    RATE_LIMITER_REDIS_HOST: "common-redis.REDIS_HOST"
    RATE_LIMITER_REDIS_PORT: "common-redis.REDIS_PORT"
  livenessProbe:
    httpGet:
      path: /authorization-server/status
      port: http
    initialDelaySeconds: 15
    periodSeconds: 5
  readinessProbe:
    httpGet:
      path: /authorization-server/status
      port: http
    initialDelaySeconds: 15
    periodSeconds: 5
    